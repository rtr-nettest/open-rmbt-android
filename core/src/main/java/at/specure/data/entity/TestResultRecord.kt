package at.specure.data.entity

import androidx.room.ColumnInfo
import androidx.room.Entity
import androidx.room.Index
import androidx.room.PrimaryKey
import at.specure.data.Classification
import at.specure.data.Columns
import at.specure.data.NetworkTypeCompat
import at.specure.data.Tables

@Entity(tableName = Tables.TEST_RESULT, indices = [Index(value = [Columns.TEST_OPEN_UUID_PARENT_COLUMN], unique = true)])
data class TestResultRecord(

    /**
     * test uuid generated by control server
     */
    @PrimaryKey
    @ColumnInfo(name = Columns.TEST_UUID_PARENT_COLUMN)
    val uuid: String,

    /**
     * open uuid of the client used for identify user in opendata
     */
    val clientOpenUUID: String,

    /**
     * open uuid of the test used for identify test in opendata and request opendata result details (necessary for graph values)
     */
    @ColumnInfo(name = Columns.TEST_OPEN_UUID_PARENT_COLUMN)
    val testOpenUUID: String,

    /**
     * Human readable format of the timezone e.g. "Europe/Bratislava"
     */
    val timezone: String,

    /**
     * Formatted text to be shared via other app
     */
    val shareText: String,

    /**
     * Title to be shared via other app
     */
    val shareTitle: String,

    /**
     * Human readable format of geolocation (only coordinates formatted)
     */
    val locationText: String?,

    /**
     * longitude coordinate of geolocation
     */
    val longitude: Double?,

    /**
     * latitude coordinate of geolocation
     */
    val latitude: Double?,

    /**
     * Time, when the test was performed in milliseconds
     */
    val timestamp: Long,

    /**
     * Formatted time, when the test was performed (ready to be displayed)
     */
    val timeText: String,

    /**
     * Server type of the network
     */
    val networkTypeRaw: Int,

    /**
     * Server type of the network (human readable format)
     */
    val networkTypeText: String,

    /**
     * Provider name
     */
    val networkProviderName: String?,

    /**
     * Network name (ssid)
     */
    val networkName: String?,

    /**
     * Classification value for assigning traffic-light-color
     */
    val uploadClass: Classification,

    /**
     * Upload speed in kbit per second
     */
    val uploadSpeedKbs: Long,

    /**
     * Classification value for assigning traffic-light-color
     */
    val downloadClass: Classification,

    /**
     * Download speed in kbit per second
     */
    val downloadSpeedKbs: Long,

    /**
     * Signal value in dBm for WIFI, 3G, 2G, 4G measurement connections
     */
    val signalStrength: Int?,

    /**
     * Classification value for assigning traffic-light-color
     */
    val signalClass: Classification,

    /**
     * Median ping (round-trip time) in milliseconds, measured on the server side. In previous versions (before June 3rd 2015) this was the minimum ping measured on the client side.
     */
    val pingMillis: Double,

    /**
     * Classification value for assigning traffic-light-color
     */
    val pingClass: Classification,

    val networkType: NetworkTypeCompat,

    val isLocalOnly: Boolean = false,

    val jitterMillis: Double?,

    val packetLossPercents: Double?,

    val jitterClass: Classification?,

    val packetLossClass: Classification?,

    val status: String?,
)

fun TestResultRecord.isCoverageResult(): Boolean {
    return status?.compareTo("coverage", true) == 0
}